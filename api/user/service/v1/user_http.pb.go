// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.12.4
// source: v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserHealthy = "/user.service.v1.User/Healthy"

type UserHTTPServer interface {
	Healthy(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.GET("/api/healthy", _User_Healthy0_HTTP_Handler(srv))
}

func _User_Healthy0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in empty.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserHealthy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Healthy(ctx, req.(*empty.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*empty.Empty)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	Healthy(ctx context.Context, req *empty.Empty, opts ...http.CallOption) (rsp *empty.Empty, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) Healthy(ctx context.Context, in *empty.Empty, opts ...http.CallOption) (*empty.Empty, error) {
	var out empty.Empty
	pattern := "/api/healthy"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserHealthy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
