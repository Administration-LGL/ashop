// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: v1/idgen.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdGen_GenerateID_FullMethodName  = "/idgen.service.v1.IdGen/GenerateID"
	IdGen_GenerateIDs_FullMethodName = "/idgen.service.v1.IdGen/GenerateIDs"
)

// IdGenClient is the client API for IdGen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdGenClient interface {
	GenerateID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GenIDReply, error)
	GenerateIDs(ctx context.Context, in *GenIDsReq, opts ...grpc.CallOption) (*GenIDsReply, error)
}

type idGenClient struct {
	cc grpc.ClientConnInterface
}

func NewIdGenClient(cc grpc.ClientConnInterface) IdGenClient {
	return &idGenClient{cc}
}

func (c *idGenClient) GenerateID(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GenIDReply, error) {
	out := new(GenIDReply)
	err := c.cc.Invoke(ctx, IdGen_GenerateID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idGenClient) GenerateIDs(ctx context.Context, in *GenIDsReq, opts ...grpc.CallOption) (*GenIDsReply, error) {
	out := new(GenIDsReply)
	err := c.cc.Invoke(ctx, IdGen_GenerateIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdGenServer is the server API for IdGen service.
// All implementations must embed UnimplementedIdGenServer
// for forward compatibility
type IdGenServer interface {
	GenerateID(context.Context, *empty.Empty) (*GenIDReply, error)
	GenerateIDs(context.Context, *GenIDsReq) (*GenIDsReply, error)
	mustEmbedUnimplementedIdGenServer()
}

// UnimplementedIdGenServer must be embedded to have forward compatible implementations.
type UnimplementedIdGenServer struct {
}

func (UnimplementedIdGenServer) GenerateID(context.Context, *empty.Empty) (*GenIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateID not implemented")
}
func (UnimplementedIdGenServer) GenerateIDs(context.Context, *GenIDsReq) (*GenIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateIDs not implemented")
}
func (UnimplementedIdGenServer) mustEmbedUnimplementedIdGenServer() {}

// UnsafeIdGenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdGenServer will
// result in compilation errors.
type UnsafeIdGenServer interface {
	mustEmbedUnimplementedIdGenServer()
}

func RegisterIdGenServer(s grpc.ServiceRegistrar, srv IdGenServer) {
	s.RegisterService(&IdGen_ServiceDesc, srv)
}

func _IdGen_GenerateID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdGenServer).GenerateID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdGen_GenerateID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdGenServer).GenerateID(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdGen_GenerateIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdGenServer).GenerateIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdGen_GenerateIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdGenServer).GenerateIDs(ctx, req.(*GenIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IdGen_ServiceDesc is the grpc.ServiceDesc for IdGen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdGen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idgen.service.v1.IdGen",
	HandlerType: (*IdGenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateID",
			Handler:    _IdGen_GenerateID_Handler,
		},
		{
			MethodName: "GenerateIDs",
			Handler:    _IdGen_GenerateIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/idgen.proto",
}
